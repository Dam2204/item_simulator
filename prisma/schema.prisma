// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id   Int      @id @default (autoincrement()) @map("user_id")
  account   String   @unique @map("account")
  password  String   @map("password") // 글자수 제한은 router에서 지정 필요
  name      String   @map("name")


  // 사용자(Users) 테이블과 캐릭터(Characters) 테이블이 1:N 관계를 맺습니다.
  characters Characters[]  

  @@map("Users")
}

model Characters {
  character_id    Int      @id @default (autoincrement()) @map("character_id")
  user_id         Int      @unique @map("user_id")
  character_name  String   @unique @map("character_name")
  health          Int      @default(500) @map("health")
  power           Int      @default(500) @map("power")
  money           Int      @default(10000) @map("money")


  //Inventory 테이블과 1:1 관계를 설정합니다.
  inventory Inventory?

  //Equipment 테이블과 1:1 관계를 설정합니다.
  equipment Equipment?

  // Users 테이블과 관계를 설정합니다.
  user Users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("Characters")
}

model Items {
  item_code   Int      @id @default (autoincrement()) @map("item_code")
  item_name   String   @unique @map("item_name")
  item_status Json     @default("{ \"health\": 0, \"power\": 0 }") @map("item_status")
  item_price  Int      @map("item_price")

  @@map("Items")
}

model Inventory {
  inventory_id  Int      @id @default (autoincrement()) @map("inventory_id")
  character_id  Int      @unique @map("character_id")
  item_list     Json     @default("{ \"item_code\": 0, \"item_name\": 0, \"count\": 0 }")   @map("item_list")

  // Characters 테이블과 관계를 설정합니다.
  character Characters @relation(fields: [character_id], references: [character_id], onDelete: Cascade)

  @@map("Inventory")
}

model Equipment {
  equipment_id     Int     @id @default (autoincrement()) @map("equipment_id")
  character_id     Int     @unique @map("character_id")
  equipment_list   Json    @default("{ \"item_code\": 0, \"item_name\": 0, \"count\": 0 }")   @map("equipment_list")


  // Characters 테이블과 관계를 설정합니다.
  character Characters @relation(fields: [character_id], references: [character_id], onDelete: Cascade)
  
  @@map("Equipment")
}